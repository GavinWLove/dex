# DEPRECATED: use config.yaml.dist and config.dev.yaml examples in the repository root.
# TODO: keep this until all references are updated.

# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
issuer: http://172.17.244.97:5556/dex

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the documentation (https://dexidp.io/docs/storage/) for further information.
storage:
#  type: sqlite3
#  config:
#    file: examples/dex.db

  type: mysql
  config:
    host: 192.168.3.170
    port: 3306
    database: dex
    user: root
    password: 123qweASD
    ssl:
      mode: "false"

  # type: postgres
  # config:
  #   host: localhost
  #   port: 5432
  #   database: dex
  #   user: postgres
  #   password: postgres
  #   ssl:
  #     mode: disable

  # type: etcd
  # config:
  #   endpoints:
  #     - http://localhost:2379
  #   namespace: dex/

  # type: kubernetes
  # config:
  #   kubeConfigFile: $HOME/.kube/config

# Configuration for the HTTP endpoints.
web:
  http: 172.17.244.97:5556
  # Uncomment for HTTPS options.
  # https: 172.17.244.97:5554
  # tlsCert: /etc/dex/tls.crt
  # tlsKey: /etc/dex/tls.key

# Configuration for dex appearance
# frontend:
#   issuer: dex
#   logoURL: theme/logo.png
#   dir: web/
#   theme: light

# Configuration for telemetry
telemetry:
  http: 172.17.244.97:5558

# Uncomment this block to enable the gRPC API. This values MUST be different
# from the HTTP endpoints.
# grpc:
#   addr: 172.17.244.97:5557
#   tlsCert: examples/grpc-client/server.crt
#   tlsKey: examples/grpc-client/server.key
#   tlsClientCA: examples/grpc-client/ca.crt

# Uncomment this block to enable configuration for the expiration time durations.
# Is possible to specify units using only s, m and h suffixes.
# expiry:
#   deviceRequests: "5m"
#   signingKeys: "6h"
#   idTokens: "24h"
#   refreshTokens:
#     reuseInterval: "3s"
#     validIfNotUsedFor: "2160h" # 90 days
#     absoluteLifetime: "3960h" # 165 days

# Options for controlling the logger.
logger:
  level: "debug"
  format: "text" # can also be "json"

# Default values shown below
oauth2:
    # use ["code", "token", "id_token"] to enable implicit flow for web-only clients
#   responseTypes: [ "code" ] # also allowed are "token" and "id_token"
    # By default, Dex will ask for approval to share data with application
    # (approval for sharing data from connected IdP to Dex is separate process on IdP)
  skipApprovalScreen: true
    # If only one authentication method is enabled, the default behavior is to
    # go directly to it. For connected IdPs, this redirects the browser away
    # from application to upstream provider such as the Google login page
#   alwaysShowLoginScreen: false
    # Uncomment the passwordConnector to use a specific connector for password grants
#   passwordConnector: local

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
- id: example-app
#  redirectURIs:
#  - 'http://172.17.244.97:5555/callback'
  name: 'Example App'
  secret: ZXhhbXBsZS1hcHAtc2VjcmV0
#  - id: example-device-client
#    redirectURIs:
#      - /device/callback
#    name: 'Static Client for Device Flow'
#    public: true
connectors:
- type: ldap
  name: OpenLDAP
  id: ldap
  config:
      # The following configurations seem to work with OpenLDAP:
      #
      # 1) Plain LDAP, without TLS:
      host: 192.168.1.98
      insecureNoSSL: true
      #
      # 2) LDAPS without certificate validation:
      #host: localhost:636
      #insecureNoSSL: false
      #insecureSkipVerify: true
      #
      # 3) LDAPS with certificate validation:
      #host: YOUR-HOSTNAME:636
      #insecureNoSSL: false
      #insecureSkipVerify: false
      #rootCAData: 'CERT'
      # ...where CERT="$( base64 -w 0 your-cert.crt )"

      # This would normally be a read-only user.
      bindDN: administrator
      bindPW: Adadmin@jk888

      usernamePrompt: Email Address

      userSearch:
          baseDN: DC=jktest,DC=cn
          filter: "(objectClass=user)"
          username: userPrincipalName
          # "DN" (case sensitive) is a special attribute name. It indicates that
          # this value should be taken from the entity's DN not an attribute on
          # the entity.
          idAttr: DN
          emailAttr: userPrincipalName
          nameAttr: sAMAccountName

- type: mockCallback
  id: mock
  name: Example
# - type: google
#   id: google
#   name: Google
#   config:
#     issuer: https://accounts.google.com
#     # Connector config values starting with a "$" will read from the environment.
#     clientID: $GOOGLE_CLIENT_ID
#     clientSecret: $GOOGLE_CLIENT_SECRET
#     redirectURI: http://172.17.244.97:5556/dex/callback
#     hostedDomains:
#     - $GOOGLE_HOSTED_DOMAIN

- type: wecom
    # Required field for connector id.
  id: wecom
    # Required field for connector name.
  name: wecom
  config:
      # Credentials can be string literals or pulled from the environment.
      corpId: wx227c3136c137e769
      corpSecret: mImrlXelFEj9kwxzUdb4lsMiAfN4zJpp7PQEqenH6ng
      agentId: "1000026"
      clientSecret: 331340bcbd65409cd5c8b31ffbb964acf9577366
      redirectURI: http://cmdp.dev.jingkunsystem.com:19041
      accessTokenURI: https://qyapi.weixin.qq.com/cgi-bin/gettoken
      userIdURI: https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo
      userInfoURI: https://qyapi.weixin.qq.com/cgi-bin//user/get
      qrConnectURI: https://open.work.weixin.qq.com/wwopen/sso/v1/qrConnect

- type: github
    # Required field for connector id.
  id: github
    # Required field for connector name.
  name: GitHub
  config:
  # Credentials can be string literals or pulled from the environment.
    clientID: 109dbbbfde48539699c4
    clientSecret: 331340bcbd65409cd5c8b31ffbb964acf9577366
    redirectURI: http://172.17.244.97:5556/dex/callback

  # Optional organizations and teams, communicated through the "groups" scope.
  #
  # NOTE: This is an EXPERIMENTAL config option and will likely change.
  #
  # Legacy 'org' field. 'org' and 'orgs' cannot be used simultaneously. A user
  # MUST be a member of the following org to authenticate with dex.
  # org: my-organization
  #
  # Dex queries the following organizations for group information if the
  # "groups" scope is provided. Group claims are formatted as "(org):(team)".
  # For example if a user is part of the "engineering" team of the "coreos"
  # org, the group claim would include "coreos:engineering".
  #
  # If orgs are specified in the config then user MUST be a member of at least one of the specified orgs to
  # authenticate with dex.
  #
  # If neither 'org' nor 'orgs' are specified in the config and 'loadAllGroups' setting set to true then user
  # authenticate with ALL user's Github groups. Typical use case for this setup:
  # provide read-only access to everyone and give full permissions if user has 'my-organization:admins-team' group claim.
  # Flag which indicates that all user groups and teams should be loaded.
  loadAllGroups: true

  # Optional choice between 'name' (default), 'slug', or 'both'.
  #
  # As an example, group claims for member of 'Site Reliability Engineers' in
  # Acme organization would yield:
  #   - ['acme:Site Reliability Engineers'] for 'name'
  #   - ['acme:site-reliability-engineers'] for 'slug'
  #   - ['acme:Site Reliability Engineers', 'acme:site-reliability-engineers'] for 'both'

  # flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
  # It is possible for a user to change their own user name but it is very rare for them to do so
  useLoginAsID: false

# Let dex keep a list of passwords which can be used to login to dex.
enablePasswordDB: true

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.
staticPasswords:
- email: "admin@example.com"
  # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
  hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
  username: "admin"
  userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
